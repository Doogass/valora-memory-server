version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: valora-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/valora.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - valora-1
      - valora-2
      - valora-3
    restart: unless-stopped
    networks:
      - valora-network

  # Valora MCP Server Instance 1
  valora-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: valora-mcp-1
    environment:
      - NODE_ENV=production
      - PORT=3000
      - VALORA_API_KEY=${VALORA_API_KEY}
      - VALORA_SECRET_KEY=${VALORA_SECRET_KEY}
      - VALIDR_API_URL=${VALIDR_API_URL}
      - VALIDR_API_KEY=${VALIDR_API_KEY}
    volumes:
      - ./logs/valora:/app/logs
    restart: unless-stopped
    networks:
      - valora-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Valora MCP Server Instance 2
  valora-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: valora-mcp-2
    environment:
      - NODE_ENV=production
      - PORT=3001
      - VALORA_API_KEY=${VALORA_API_KEY}
      - VALORA_SECRET_KEY=${VALORA_SECRET_KEY}
      - VALIDR_API_URL=${VALIDR_API_URL}
      - VALIDR_API_KEY=${VALIDR_API_KEY}
    volumes:
      - ./logs/valora:/app/logs
    restart: unless-stopped
    networks:
      - valora-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Valora MCP Server Instance 3
  valora-3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: valora-mcp-3
    environment:
      - NODE_ENV=production
      - PORT=3002
      - VALORA_API_KEY=${VALORA_API_KEY}
      - VALORA_SECRET_KEY=${VALORA_SECRET_KEY}
      - VALIDR_API_URL=${VALIDR_API_URL}
      - VALIDR_API_KEY=${VALIDR_API_KEY}
    volumes:
      - ./logs/valora:/app/logs
    restart: unless-stopped
    networks:
      - valora-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage
  redis:
    image: redis:alpine
    container_name: valora-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - valora-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data (optional)
  postgres:
    image: postgres:15-alpine
    container_name: valora-postgres
    environment:
      - POSTGRES_DB=valora
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - valora-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: valora-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - valora-network

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: valora-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - valora-network

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  valora-network:
    driver: bridge
